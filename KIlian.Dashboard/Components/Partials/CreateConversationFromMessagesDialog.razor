@implements IDialogContentComponent<IEnumerable<MessageDto>>

@using KIlian.Generated.Rpc.Conversations

@inject Conversation.ConversationClient ConversationClient

<style>
    .fluent-sortable-list.sortable-conversation-turns .sortable-item {
        height: auto !important;
        display: block;
        padding: 5px;
    }
</style>

<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentSortableList TItem="CreateConversationTurnDto" Items="_turns" OnUpdate="OnUpdateConversationTurnsOrder" Context="turn" Class="sortable-conversation-turns" Style="width: 100%">
            <ItemTemplate>
                @{
                    var label = _turns.IndexOf(turn) % 2 == 0 ? "User:" : "Assistant:";
                }

                <FluentTextArea Label="@label" @bind-Value="@turn.Content" Style="width: 100%" Resize="TextAreaResize.Vertical" Rows="5"/>
                <div Style="margin-top: 5px; display: flex; justify-content: flex-end">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" OnClick="() => RemoveTurn(turn)" />
                </div>
            </ItemTemplate>
        </FluentSortableList>
        <FluentStack Style="justify-content: space-between">
            <FluentCheckbox Label="Ursprüngliche Nachrichten löschen?" @bind-Value="@_deleteSourceMessages" />
            <FluentButton OnClick="AddTurn">Hinzufügen</FluentButton>
        </FluentStack>
    </FluentStack>
</FluentDialogBody>
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="CreateConversationAsync">Speichern</FluentButton>
    <FluentButton OnClick="() => Dialog.CancelAsync()">Abbrechen</FluentButton>
</FluentDialogFooter>

@code {
    private MessageDto[] _messages = [];
    private List<CreateConversationTurnDto> _turns = [];
    private bool _deleteSourceMessages;
    
    protected override void OnParametersSet()
    {
        _turns = _messages.Select((message, index) => new CreateConversationTurnDto
        {
            Content = message.Content,
            Order = index
        }).ToList();
    }

    [Parameter]
    public IEnumerable<MessageDto> Content
    {
        get => _messages.AsReadOnly();
        set => _messages = value.ToArray();
    }

    [CascadingParameter] public FluentDialog Dialog { get; set; } = null!;

    private void OnUpdateConversationTurnsOrder(FluentSortableListEventArgs args)
    {
        if (args.OldIndex == args.NewIndex)
        {
            return;
        }

        var turn = _turns[args.OldIndex];
        _turns.RemoveAt(args.OldIndex);

        if (args.NewIndex < _turns.Count)
        {
            _turns.Insert(args.NewIndex, turn);
        }
        else
        {
            _turns.Add(turn);
        }
        
        UpdateOrder();
    }

    private void UpdateOrder()
    {
        for (var i = 0; i < _turns.Count; i++)
        {
            _turns[i].Order = i;
        }
    }

    private void RemoveTurn(CreateConversationTurnDto turn)
    {
        if (_turns.Remove(turn))
        {
            UpdateOrder();
        }
    }

    private void AddTurn() => _turns.Add(new() { Order = _turns.Count });

    private async Task CreateConversationAsync()
    {
        if (_turns.Count < 2)
        {
            return;
        }

        await ConversationClient.CreateConversationFromTurnsAsync(new()
        {
            Turns =
            {
                _turns.Select(turn => new CreateConversationTurnDto
                {
                    Content = turn.Content,
                    Order = turn.Order
                })
            }
        });

        if (_deleteSourceMessages)
        {
            await ConversationClient.DeleteMessagesAsync(new()
            {
                MessageIds =
                {
                    _messages.Select(message => message.Id)
                }
            });
        }

        await Dialog.CloseAsync(_deleteSourceMessages);
    }
}