@page "/conversations"
@using Grpc.Core
@using KIlian.Dashboard.Features.Components.Extensions
@using KIlian.Generated.Rpc.Conversations

@inject Conversation.ConversationClient ConversationClient
@inject IDialogService DialogService
@inject IToastService Toast
@inject IJSRuntime Js

<style>
    .fluent-sortable-list.sortable-conversation-turns .sortable-item {
        height: auto !important;
        display: block;
        padding: 5px;
    }
    
    .fluent-splitter > div:first-child {
        padding: 10px 10px 10px 0;
    }

    .fluent-splitter > div:last-child {
        padding: 10px 0 10px 10px;
    }
</style>

<PageTitle>Konversationen</PageTitle>

<FluentSplitter Panel1MinSize="50%" Panel1Size="70%" Panel2MinSize="20%">
    <Panel1>
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="30">
            <div>
                <h4>Rohe Nachrichten</h4>
                <div style="display: table; table-layout: fixed; width: 100%;">
                    <div style="overflow: auto; height: 400px;">
                        <FluentDataGrid TGridItem="MessageDto" @ref="_messagesGrid" Pagination="_pagination" MultiLine="true" ItemsProvider="GetMessages" GenerateHeader="GenerateHeaderOption.Sticky">
                            <SelectColumn TGridItem="MessageDto" SelectMode="DataGridSelectMode.Multiple" @bind-SelectedItems="_selectedMessages" />
                            <TemplateColumn Title="Erstellt" Width="200px">
                                <TimestampColumnContent Timestamp="@context.Created"/>
                            </TemplateColumn>
                            <PropertyColumn Title="Inhalt" Property="@(m => m.Content)" Style="white-space: preserve;" />
                            <PropertyColumn Title="Von" Property="@(m => m.From)" Style="min-width: 80px" />
                        </FluentDataGrid>
                    </div>
                </div>

                <CustomFluentPaginator State="_pagination" RefreshDataDelegate="() => _messagesGrid.RefreshAsync()" />

                <FluentStack Style="justify-content: space-between; margin-top: 10px">
                    <FluentButton Disabled="!_selectedMessages.Any()" OnClick="DeleteMessages">Ausgewählte Nachrichten Löschen</FluentButton>
                    <FluentMenuButton Appearance="Appearance.Accent" Text="Konversation">
                        <FluentMenuItem OnClick="() => SelectedMessagesToConversationTurns(overwrite: true)">Neue Konversation</FluentMenuItem>
                        <FluentMenuItem OnClick="() => SelectedMessagesToConversationTurns(overwrite: false)">Zu Konversation hinzufügen</FluentMenuItem>
                    </FluentMenuButton>
                </FluentStack>
            </div>

            <hr/>
            
            <div>
                <h4>Trainingsdaten</h4>
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentNumberField Label="Anzahl Konversationen" Min="1" @bind-Value="_conversations"/>
                    <FluentButton Appearance="Appearance.Accent" OnClick="GenerateTrainingData">Trainingsdaten generieren</FluentButton>
                </FluentStack>
            </div>
        </FluentStack>
    </Panel1>
    
    <Panel2>
        <h4>Konversation erstellen</h4>
        <FluentSortableList TItem="CreateConversationTurnDto" Items="_conversationTurns" OnUpdate="OnUpdateConversationTurnsOrder" Context="turn" Class="sortable-conversation-turns" Style="width: 100%">
            <ItemTemplate>
                @{
                    var label = _conversationTurns.IndexOf(turn) % 2 == 0 ? "User:" : "Assistant:";
                }

                <FluentTextArea Label="@label" @bind-Value="@turn.Content" Style="width: 100%" Resize="TextAreaResize.Vertical" Rows="5" />
                <div Style="margin-top: 5px; display: flex; justify-content: flex-end">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" OnClick="() => RemoveTurn(turn)" />
                </div>
            </ItemTemplate>
        </FluentSortableList>

        <FluentStack Orientation="Orientation.Vertical" Style="margin-top: 10px; justify-content: end">
            <FluentButton OnClick="AddTurn" Style="align-self: end">Hinzufügen</FluentButton>
            
            <FluentStack Style="justify-content: space-between;">
                <FluentButton OnClick="ResetConversationTurns">Zurücksetzen</FluentButton>
                <FluentButton OnClick="CreateConversationAsync" Disabled="!CanCreateConversation()" Appearance="Appearance.Accent">Anlegen</FluentButton>
            </FluentStack>
        </FluentStack>
    </Panel2>
</FluentSplitter>

<script>
    window.downloadTrainingData = async contentStreamReference => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = 'training-data.json';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    };
</script>

@code {
    private FluentDataGrid<MessageDto>? _messagesGrid;
    private readonly PaginationState _pagination = new() { ItemsPerPage = 50 };
    private IEnumerable<MessageDto> _selectedMessages = [];
    private readonly List<CreateConversationTurnDto> _conversationTurns = [];
    private int? _conversations;

    private async ValueTask<GridItemsProviderResult<MessageDto>> GetMessages(GridItemsProviderRequest<MessageDto> request)
    {
        var response = await ConversationClient.GetMessagesAsync(new()
        {
            Pagination = new()
            {
                Count = request.Count ?? 50,
                Offset = request.StartIndex
            }
        });
        
        return GridItemsProviderResult.From<MessageDto>(response.Messages, response.Paginated.TotalItemsCount);
    }

    private void ResetConversationTurns() => _conversationTurns.Clear();

    private void SelectedMessagesToConversationTurns(bool overwrite)
    {
        var turns = _selectedMessages.OrderBy(message => message.Created).Select((message, index) => new CreateConversationTurnDto
        {
            Content = message.Content,
            Order = index
        });

        if (overwrite)
        {
            ResetConversationTurns();
        }
        
        _conversationTurns.AddRange(turns);
    }
    
    private void OnUpdateConversationTurnsOrder(FluentSortableListEventArgs args)
    {
        if (args.OldIndex == args.NewIndex)
        {
            return;
        }

        var turn = _conversationTurns[args.OldIndex];
        _conversationTurns.RemoveAt(args.OldIndex);

        if (args.NewIndex < _conversationTurns.Count)
        {
            _conversationTurns.Insert(args.NewIndex, turn);
        }
        else
        {
            _conversationTurns.Add(turn);
        }
        
        UpdateOrder(Math.Min(args.OldIndex, args.NewIndex));
    }

    private void UpdateOrder(int startIndex = 0)
    {
        for (var i = startIndex; i < _conversationTurns.Count; i++)
        {
            _conversationTurns[i].Order = i;
        }
    }

    private void RemoveTurn(CreateConversationTurnDto turn)
    {
        var index = _conversationTurns.IndexOf(turn);

        if (index <= -1)
        {
            return;
        }

        _conversationTurns.Remove(turn);
        UpdateOrder(index);
    }

    private void AddTurn() => _conversationTurns.Add(new() { Order = _conversationTurns.Count });

    private bool CanCreateConversation() => _conversationTurns.Count >= 2 && !_conversationTurns.Any(turn => string.IsNullOrWhiteSpace(turn.Content));
    
    private async Task CreateConversationAsync()
    {
        if (!CanCreateConversation())
        {
            return;
        }

        await ConversationClient.CreateConversationFromTurnsAsync(new()
        {
            Turns = { _conversationTurns }
        });

        Toast.ShowSuccess("Konversation erfolgreich angelegt", 5000);
    }

    private async Task GenerateTrainingData()
    {
        var generateTrainingDataDto = new GenerateTrainingDataDto();
        if (_conversations.HasValue)
        {
            generateTrainingDataDto.AmountOfConversations = _conversations.Value;
        }
        var response = ConversationClient.GenerateTrainingData(generateTrainingDataDto);

        using var underlyingStream = new MemoryStream();
        
        await foreach (var chunk in response.ResponseStream.ReadAllAsync())
        {
            chunk.Chunk.WriteTo(underlyingStream);
        }

        underlyingStream.Position = 0;
        
        using var streamRef = new DotNetStreamReference(underlyingStream);
        
        await Js.InvokeVoidAsync("downloadTrainingData", streamRef);
    }

    private async Task DeleteMessages()
    {
        var dialog = await DialogService.ShowConfirmationAsync("Nachrichten wirklich löschen?", "Ja", "Nein", "Bestätigen");
        var result = await dialog.Result;

        if (result.Cancelled)
        {
            return;
        }
        
        await ConversationClient.DeleteMessagesAsync(new()
        {
            MessageIds =
            {
                _selectedMessages.Select(message => message.Id)
            }
        });

        _selectedMessages = [];

        await _messagesGrid.RefreshAsync();
    }
}